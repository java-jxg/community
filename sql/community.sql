/*
Navicat MySQL Data Transfer

Source Server         : 本地
Source Server Version : 50645
Source Host           : localhost:3306
Source Database       : community

Target Server Type    : MYSQL
Target Server Version : 50645
File Encoding         : 65001

Date: 2019-12-14 12:50:10
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for `comment`
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `parent_id` bigint(20) NOT NULL,
  `type` int(11) NOT NULL,
  `commentator` bigint(20) NOT NULL,
  `gmt_create` bigint(20) NOT NULL,
  `gmt_modified` bigint(20) NOT NULL,
  `like_count` bigint(20) DEFAULT '0',
  `content` varchar(1024) DEFAULT NULL,
  `comment_count` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES ('1', '67', '1', '15', '1576198915000', '1576198915000', '0', '123456', '2');
INSERT INTO `comment` VALUES ('2', '1', '2', '15', '1576199827761', '1576199827761', '0', '4', '0');
INSERT INTO `comment` VALUES ('3', '1', '2', '15', '1576200088732', '1576200088732', '0', '456', '0');
INSERT INTO `comment` VALUES ('4', '70', '1', '15', '1576200100271', '1576200100271', '0', '123', '0');
INSERT INTO `comment` VALUES ('5', '68', '1', '15', '1576200507964', '1576200507964', '0', '1', '1');
INSERT INTO `comment` VALUES ('6', '68', '1', '15', '1576200510182', '1576200510182', '0', '2', '1');
INSERT INTO `comment` VALUES ('7', '68', '1', '15', '1576200511689', '1576200511689', '0', '3', '1');
INSERT INTO `comment` VALUES ('8', '68', '1', '15', '1576200513260', '1576200513260', '0', '4', '1');
INSERT INTO `comment` VALUES ('9', '68', '1', '15', '1576200514976', '1576200514976', '0', '5', '1');
INSERT INTO `comment` VALUES ('10', '68', '1', '15', '1576200517060', '1576200517060', '0', '6', '0');
INSERT INTO `comment` VALUES ('11', '68', '1', '15', '1576200518875', '1576200518875', '0', '7', '0');
INSERT INTO `comment` VALUES ('12', '68', '1', '15', '1576200520935', '1576200520935', '0', '8', '1');
INSERT INTO `comment` VALUES ('13', '68', '1', '15', '1576200522582', '1576200522582', '0', '9', '0');
INSERT INTO `comment` VALUES ('14', '9', '2', '15', '1576200525964', '1576200525964', '0', '10', '0');
INSERT INTO `comment` VALUES ('15', '8', '2', '15', '1576200528998', '1576200528998', '0', '11', '0');
INSERT INTO `comment` VALUES ('16', '7', '2', '15', '1576200532288', '1576200532288', '0', '12', '0');
INSERT INTO `comment` VALUES ('17', '6', '2', '15', '1576200534969', '1576200534969', '0', '13', '0');
INSERT INTO `comment` VALUES ('18', '5', '2', '15', '1576200537789', '1576200537789', '0', '14', '0');
INSERT INTO `comment` VALUES ('19', '12', '2', '15', '1576200541000', '1576200541000', '0', '15', '0');
INSERT INTO `comment` VALUES ('20', '94', '1', '15', '1576225480886', '1576225480886', '0', '1', '1');
INSERT INTO `comment` VALUES ('21', '20', '2', '15', '1576225495266', '1576225495266', '0', '1', '0');
INSERT INTO `comment` VALUES ('22', '94', '1', '15', '1576225701841', '1576225701841', '0', '1', '1');
INSERT INTO `comment` VALUES ('23', '22', '2', '15', '1576225761669', '1576225761669', '0', '1', '0');

-- ----------------------------
-- Table structure for `notification`
-- ----------------------------
DROP TABLE IF EXISTS `notification`;
CREATE TABLE `notification` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `notifier` bigint(20) NOT NULL,
  `receiver` bigint(20) NOT NULL,
  `outerId` bigint(20) NOT NULL,
  `type` int(11) NOT NULL,
  `gmt_create` bigint(20) NOT NULL,
  `status` int(11) NOT NULL DEFAULT '0',
  `NOTIFIER_NAME` varchar(100) DEFAULT NULL,
  `OUTER_TITLE` varchar(256) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of notification
-- ----------------------------
INSERT INTO `notification` VALUES ('1', '15', '15', '67', '1', '1576198915024', '1', 'shikong', '想问一个关于spring的问题');
INSERT INTO `notification` VALUES ('2', '15', '15', '67', '2', '1576199827779', '1', 'shikong', '想问一个关于spring的问题');
INSERT INTO `notification` VALUES ('3', '15', '15', '67', '2', '1576200088745', '1', 'shikong', '想问一个关于spring的问题');
INSERT INTO `notification` VALUES ('4', '15', '15', '70', '1', '1576200100276', '1', 'shikong', '简单提一个问题');
INSERT INTO `notification` VALUES ('5', '15', '15', '68', '1', '1576200507977', '1', 'shikong', '再问一个关于spring boot的问题');
INSERT INTO `notification` VALUES ('6', '15', '15', '68', '1', '1576200510193', '1', 'shikong', '再问一个关于spring boot的问题');
INSERT INTO `notification` VALUES ('7', '15', '15', '68', '1', '1576200511697', '1', 'shikong', '再问一个关于spring boot的问题');
INSERT INTO `notification` VALUES ('8', '15', '15', '68', '1', '1576200513266', '1', 'shikong', '再问一个关于spring boot的问题');
INSERT INTO `notification` VALUES ('9', '15', '15', '68', '1', '1576200514987', '1', 'shikong', '再问一个关于spring boot的问题');
INSERT INTO `notification` VALUES ('10', '15', '15', '68', '1', '1576200517074', '1', 'shikong', '再问一个关于spring boot的问题');
INSERT INTO `notification` VALUES ('11', '15', '15', '68', '1', '1576200518884', '1', 'shikong', '再问一个关于spring boot的问题');
INSERT INTO `notification` VALUES ('12', '15', '15', '68', '1', '1576200520949', '1', 'shikong', '再问一个关于spring boot的问题');
INSERT INTO `notification` VALUES ('13', '15', '15', '68', '1', '1576200522587', '1', 'shikong', '再问一个关于spring boot的问题');
INSERT INTO `notification` VALUES ('14', '15', '15', '68', '2', '1576200525973', '1', 'shikong', '再问一个关于spring boot的问题');
INSERT INTO `notification` VALUES ('15', '15', '15', '68', '2', '1576200529009', '1', 'shikong', '再问一个关于spring boot的问题');
INSERT INTO `notification` VALUES ('16', '15', '15', '68', '2', '1576200532302', '1', 'shikong', '再问一个关于spring boot的问题');
INSERT INTO `notification` VALUES ('17', '15', '15', '68', '2', '1576200534980', '1', 'shikong', '再问一个关于spring boot的问题');
INSERT INTO `notification` VALUES ('18', '15', '15', '68', '2', '1576200537805', '1', 'shikong', '再问一个关于spring boot的问题');
INSERT INTO `notification` VALUES ('19', '15', '15', '68', '2', '1576200541010', '1', 'shikong', '再问一个关于spring boot的问题');
INSERT INTO `notification` VALUES ('20', '15', '15', '94', '1', '1576225480902', '1', 'shikong', 'btf');
INSERT INTO `notification` VALUES ('21', '15', '15', '94', '2', '1576225495274', '1', 'shikong', 'btf');

-- ----------------------------
-- Table structure for `question`
-- ----------------------------
DROP TABLE IF EXISTS `question`;
CREATE TABLE `question` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `title` varchar(50) DEFAULT NULL,
  `description` text,
  `gmt_create` bigint(20) DEFAULT NULL,
  `gmt_modified` bigint(20) DEFAULT NULL,
  `creator` bigint(20) DEFAULT NULL,
  `comment_count` int(11) DEFAULT NULL,
  `view_count` int(11) DEFAULT NULL,
  `like_count` int(11) DEFAULT NULL,
  `tag` varchar(256) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=110 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of question
-- ----------------------------
INSERT INTO `question` VALUES ('67', '想问一个关于spring的问题', '问吧!!!!!!!!!!!!!!!!!!!!!!!!!!!!!', '1576135092037', '1576135092037', '15', '1', '33', null, 'javascript,php,css');
INSERT INTO `question` VALUES ('68', '再问一个关于spring boot的问题', '这个比较难哟', '1576135112814', '1576135112814', '15', '9', '37', '0', 'spring boot,spring MVC');
INSERT INTO `question` VALUES ('69', '关于java 项目的问题', '这个比较简单', '1576135130046', '1576135130046', '15', '0', '5', '0', 'java,c语言');
INSERT INTO `question` VALUES ('70', '简单提一个问题', '呵呵呵', '1576141179785', '1576141179785', '15', '1', '5', '0', 'javascript');
INSERT INTO `question` VALUES ('71', '1', '1', '1576202003812', '1576202003812', '15', '0', '2', '0', 'php');
INSERT INTO `question` VALUES ('72', '2', '2', '1576202017903', '1576202017903', '15', '0', '0', '0', 'java');
INSERT INTO `question` VALUES ('73', '3', '3', '1576202024897', '1576202024897', '15', '0', '0', '0', 'python');
INSERT INTO `question` VALUES ('74', '4', '4', '1576202033380', '1576202033380', '15', '0', '0', '0', 'c++');
INSERT INTO `question` VALUES ('75', '6', '6', '1576202042998', '1576202042998', '15', '0', '0', '0', 'python');
INSERT INTO `question` VALUES ('76', '7', '7', '1576202050959', '1576202050959', '15', '0', '0', '0', 'c');
INSERT INTO `question` VALUES ('77', '9', '9', '1576202057397', '1576202057397', '15', '0', '0', '0', 'perl');
INSERT INTO `question` VALUES ('78', '10', '10', '1576202066974', '1576202066974', '15', '0', '0', '0', 'vim');
INSERT INTO `question` VALUES ('79', '11', '11', '1576202074070', '1576202074070', '15', '0', '0', '0', 'lua');
INSERT INTO `question` VALUES ('80', '1', '@GetMapping(\"/callback\")\r\n    public String callback(@RequestParam(name=\"code\") String code,\r\n                           @RequestParam(name=\"state\") String state,\r\n                           HttpServletRequest request,\r\n                           HttpServletResponse response){\r\n        AccessTokenDTO accessTokenDTO = new AccessTokenDTO();\r\n        accessTokenDTO.setClient_id(clientId);\r\n        accessTokenDTO.setClient_secret(clientSecret);\r\n        accessTokenDTO.setCode(code);\r\n        accessTokenDTO.setRedirect_url(clientUrl);\r\n        accessTokenDTO.setState(state);\r\n        String accessToken = githubProvider.getAccessToken(accessTokenDTO);\r\n\r\n        GithubUser githubUser = githubProvider.getUser(accessToken);\r\n        if (githubUser != null && githubUser.getId() != null) {\r\n            User user = new User();\r\n            String token = UUID.randomUUID().toString();\r\n            user.setToken(token);\r\n            user.setName(githubUser.getName());\r\n            user.setAccountId(String.valueOf(githubUser.getId()));\r\n            user.setAvatarUrl(githubUser.getAvatarUrl());\r\n            userService.createOrUpdate(user);\r\n            response.addCookie(new Cookie(\"token\", token));\r\n            return \"redirect:/\";\r\n        } else {\r\n            // 登录失败，重新登录\r\n            return \"redirect:/\";\r\n        }\r\n    }', '1576206694463', '1576206694463', '15', '0', '2', '0', 'vim');
INSERT INTO `question` VALUES ('81', '富文本编辑器', '@GetMapping(\"/question/{id}\")\r\n	public String question(@PathVariable(name = \"id\") Long id, Model model){\r\n        QuestionDTO questionDTO = questionService.getById(id);\r\n        List<QuestionDTO> relatedQuestions = questionService.selectRelated(questionDTO);\r\n        List<CommentExDTO> comments = commentService.listByQuestionId(id, CommentTypeEnum.QUESTION);\r\n        questionService.incView(id);\r\n        model.addAttribute(\"question\",questionDTO);\r\n        model.addAttribute(\"comments\",comments);\r\n        model.addAttribute(\"relatedQuestions\", relatedQuestions);\r\n        return \"question\";\r\n    }', '1576207029949', '1576207029949', '15', '0', '1', '0', 'git');
INSERT INTO `question` VALUES ('82', '富123455', 'public String callback(@RequestParam(name=\"code\") String code,\r\n                           @RequestParam(name=\"state\") String state,\r\n                           HttpServletRequest request,\r\n                           HttpServletResponse response){\r\n        AccessTokenDTO accessTokenDTO = new AccessTokenDTO();\r\n        accessTokenDTO.setClient_id(clientId);\r\n        accessTokenDTO.setClient_secret(clientSecret);\r\n        accessTokenDTO.setCode(code);\r\n        accessTokenDTO.setRedirect_url(clientUrl);\r\n        accessTokenDTO.setState(state);\r\n        String accessToken = githubProvider.getAccessToken(accessTokenDTO);\r\n\r\n        GithubUser githubUser = githubProvider.getUser(accessToken);\r\n        if (githubUser != null && githubUser.getId() != null) {\r\n            User user = new User();\r\n            String token = UUID.randomUUID().toString();\r\n            user.setToken(token);\r\n            user.setName(githubUser.getName());\r\n            user.setAccountId(String.valueOf(githubUser.getId()));\r\n            user.setAvatarUrl(githubUser.getAvatarUrl());\r\n            userService.createOrUpdate(user);\r\n            response.addCookie(new Cookie(\"token\", token));\r\n            return \"redirect:/\";\r\n        } else {\r\n            // 登录失败，重新登录\r\n            return \"redirect:/\";\r\n        }\r\n    }', '1576207208080', '1576207208080', '15', '0', '3', '0', 'html');
INSERT INTO `question` VALUES ('83', '富 456123456', 'public String callback(@RequestParam(name=\"code\") String code,\r\n                           @RequestParam(name=\"state\") String state,\r\n                           HttpServletRequest request,\r\n                           HttpServletResponse response){\r\n        AccessTokenDTO accessTokenDTO = new AccessTokenDTO();\r\n        accessTokenDTO.setClient_id(clientId);\r\n        accessTokenDTO.setClient_secret(clientSecret);\r\n        accessTokenDTO.setCode(code);\r\n        accessTokenDTO.setRedirect_url(clientUrl);\r\n        accessTokenDTO.setState(state);\r\n        String accessToken = githubProvider.getAccessToken(accessTokenDTO);\r\n\r\n        GithubUser githubUser = githubProvider.getUser(accessToken);\r\n        if (githubUser != null && githubUser.getId() != null) {\r\n            User user = new User();\r\n            String token = UUID.randomUUID().toString();\r\n            user.setToken(token);\r\n            user.setName(githubUser.getName());\r\n            user.setAccountId(String.valueOf(githubUser.getId()));\r\n            user.setAvatarUrl(githubUser.getAvatarUrl());\r\n            userService.createOrUpdate(user);\r\n            response.addCookie(new Cookie(\"token\", token));\r\n            return \"redirect:/\";\r\n        } else {\r\n            // 登录失败，重新登录\r\n            return \"redirect:/\";\r\n        }\r\n    }', '1576207269297', '1576207269297', '15', '0', '1', '0', 'css');
INSERT INTO `question` VALUES ('84', '新问题', 'Notification notification = new Notification();\r\n        notification.setGmtCreate(System.currentTimeMillis());\r\n        notification.setType(notificationType.getType());\r\n        notification.setOuterid(outerId);\r\n        notification.setNotifier(comment.getCommentator());\r\n        notification.setStatus(NotificationStatusEnum.UNREAD.getStatus());\r\n        notification.setReceiver(receiver);\r\n        notification.setNotifierName(notifierName);\r\n        notification.setOuterTitle(outerTitle);\r\n        notificationMapper.insert(notification);\r\n    }', '1576207416018', '1576207416018', '15', '0', '2', '0', 'vim');
INSERT INTO `question` VALUES ('85', '123455', '12345', '1576207549569', '1576207549569', '15', '0', '3', '0', 'css');
INSERT INTO `question` VALUES ('86', '测试', 'public void insert(Comment comment, User commentator) {\r\n        if (comment.getParentId() == null || comment.getParentId() == 0) {\r\n            throw new CustomizeException(CustomizeErrorCode.TARGET_PARAM_NOT_FOUND);\r\n        }\r\n        if (comment.getType() == null || !CommentTypeEnum.isExist(comment.getType())) {\r\n            throw new CustomizeException(CustomizeErrorCode.TYPE_PARAM_WRONG);\r\n        }\r\n        if (comment.getType() == CommentTypeEnum.COMMENT.getType()) {\r\n            // 回复评论\r\n            Comment dbComment = commentMapper.selectByPrimaryKey(comment.getParentId());\r\n            if (dbComment == null) {\r\n                throw new CustomizeException(CustomizeErrorCode.COMMENT_NOT_FOUND);\r\n            }\r\n\r\n\r\n            // 回复问题\r\n            Question question = questionMapper.selectByPrimaryKey(dbComment.getParentId());\r\n            if (question == null) {\r\n                throw new CustomizeException(CustomizeErrorCode.QUESTION_NOT_FOUND);\r\n            }\r\n\r\n\r\n            commentMapper.insert(comment);\r\n            comment.setCommentCount(1);\r\n            questionExMapper.incCommentCC(comment);\r\n            createNotify(comment, dbComment.getCommentator(), commentator.getName(), question.getTitle(), NotificationTypeEnum.REPLY_COMMENT, question.getId());\r\n\r\n        } else {\r\n            // 回复问题\r\n            Question question = questionMapper.selectByPrimaryKey(comment.getParentId());\r\n            if (question == null) {\r\n                throw new CustomizeException(CustomizeErrorCode.QUESTION_NOT_FOUND);\r\n            }\r\n            commentMapper.insert(comment);\r\n            question.setCommentCount(1);\r\n            questionExMapper.incCommentCount(question);\r\n\r\n            createNotify(comment, question.getCreator(), commentator.getName(), question.getTitle(), NotificationTypeEnum.REPLY_QUESTION, question.getId());\r\n        }\r\n    }', '1576207772756', '1576207772756', '15', '0', '2', '0', 'c');
INSERT INTO `question` VALUES ('87', 'html', '* @RequestParam(name=\"state\") String state,\r\n                           HttpServletRequest request,\r\n                           HttpServletResponse response){\r\n        AccessTokenDTO accessTokenDTO = new AccessTokenDTO();\r\n        accessTokenDTO.setClient_id(clientId);\r\n        accessTokenDTO.setClient_secret(clientSecret);\r\n        accessTokenDTO.setCode(code);\r\n        accessTokenDTO.setRedirect_url(clientUrl);\r\n        accessTokenDTO.setState(state);\r\n        String accessToken = githubProvider.getAccessToken(accessTokenDTO);\r\n\r\n        GithubUser githubUser = githubProvider.getUser(accessToken);\r\n        if (githubUser != null && githubUser.getId() != null) {\r\n            User user = new User();\r\n            String token = UUID.randomUUID().toString();\r\n            user.setToken(token);\r\n            user.setName(githubUser.getN*ame());\r\n            user.setAccountId(String.valueOf(githubUser.getId()));\r\n            user.setAvatarUrl(githubUser.getAvatarUrl());\r\n            userService.createOrUpdate(user);\r\n            response.addCookie(new Cookie(\"token\", token));\r\n            return \"redirect:/\";\r\n        } else {\r\n            // 登录失败，重新登录\r\n            return \"redirect:/\";\r\n        }\r\n    }*', '1576208045073', '1576208045073', '15', '0', '1', '0', 'html');
INSERT INTO `question` VALUES ('88', '123', '@GetMapping(\"/callback\")\r\n    public String callback(@RequestParam(name=\"code\") String code,\r\n                           @RequestParam(name=\"state\") String state,\r\n                           HttpServletRequest request,\r\n                           HttpServletResponse response){\r\n        AccessTokenDTO accessTokenDTO = new AccessTokenDTO();\r\n        accessTokenDTO.setClient_id(clientId);\r\n        accessTokenDTO.setClient_secret(clientSecret);\r\n        accessTokenDTO.setCode(code);\r\n        accessTokenDTO.setRedirect_url(clientUrl);\r\n        accessTokenDTO.setState(state);\r\n        String accessToken = githubProvider.getAccessToken(accessTokenDTO);\r\n\r\n        GithubUser githubUser = githubProvider.getUser(accessToken);\r\n        if (githubUser != null && githubUser.getId() != null) {\r\n            User user = new User();\r\n            String token = UUID.randomUUID().toString();\r\n            user.setToken(token);\r\n            user.setName(githubUser.getName());\r\n            user.setAccountId(String.valueOf(githubUser.getId()));\r\n            user.setAvatarUrl(githubUser.getAvatarUrl());\r\n            userService.createOrUpdate(user);\r\n            response.addCookie(new Cookie(\"token\", token));\r\n            return \"redirect:/\";\r\n        } else {\r\n            // 登录失败，重新登录\r\n            return \"redirect:/\";\r\n        }\r\n    }', '1576208182343', '1576208182343', '15', '0', '2', '0', 'vim');
INSERT INTO `question` VALUES ('89', '再次测试', '```\r\npackage com.fastcase.community.mapper;\r\n\r\nimport com.fastcase.community.dto.CommentExDTO;\r\nimport com.fastcase.community.dto.QuestionDTO;\r\n\r\nimport com.fastcase.community.model.Comment;\r\nimport com.fastcase.community.model.Question;\r\nimport org.apache.ibatis.annotations.Param;\r\nimport org.apache.ibatis.annotations.Select;\r\nimport org.apache.ibatis.annotations.Update;\r\n\r\nimport java.util.List;\r\n\r\npublic interface QuestionExMapper {\r\n    @Select(\"SELECT * FROM question q \\n\" +\r\n            \"LEFT JOIN USER u ON q.creator=u.id order by q.gmt_create desc\")\r\n    List<QuestionDTO> list();\r\n\r\n    @Select(\"SELECT * FROM question q\\n\" +\r\n            \"LEFT JOIN USER u ON q.creator=u.id\\n\" +\r\n            \"WHERE creator = #{userId}\")\r\n    List<QuestionDTO> listByUserId(@Param(\"userId\") Long userId);\r\n\r\n    @Select(\"SELECT * FROM question q\\n\" +\r\n            \"LEFT JOIN USER u ON q.creator=u.id\\n\" +\r\n            \"WHERE q.id = #{id}\")\r\n    QuestionDTO getById(@Param(\"id\") Long id);\r\n\r\n    @Update(\"update QUESTION set VIEW_COUNT = VIEW_COUNT + #{viewCount,jdbcType=INTEGER} where id = #{id}\")\r\n    void incView(Question question);\r\n    @Update(\"update QUESTION set COMMENT_COUNT = COMMENT_COUNT + #{commentCount,jdbcType=INTEGER} where id = #{id}\")\r\n    int incCommentCount(Question record);\r\n\r\n\r\n\r\n\r\n    @Select(\"SELECT * FROM COMMENT c\\n\" +\r\n            \"LEFT JOIN USER u ON c.commentator=u.id\\n\" +\r\n            \"WHERE c.type=#{type} AND c.parent_id=#{id} order by c.gmt_create desc\")\r\n    List<CommentExDTO> getCommentByParentId(Long id, Integer type);\r\n    @Update(\"update comment set COMMENT_COUNT = COMMENT_COUNT + #{commentCount,jdbcType=INTEGER} where id = #{parentId}\")\r\n    void incCommentCC(Comment comment);\r\n\r\n    @Select(\"select * from QUESTION where id != #{id} and tag regexp #{tag}\")\r\n    List<Question> selectRelated(Question question);\r\n}\r\n```', '1576211163709', '1576211163709', '15', '0', '1', '0', 'vim');
INSERT INTO `question` VALUES ('90', 'FileController', '![](/images/wechat.jpg)\r\n```\r\npackage com.fastcase.community.controller;\r\n\r\nimport com.fastcase.community.dto.FileDTO;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.ResponseBody;\r\n\r\n@Controller\r\npublic class FileController {\r\n    @RequestMapping(\"/file/upload\")\r\n    @ResponseBody\r\n    public FileDTO upload(){\r\n        FileDTO fileDTO = new FileDTO();\r\n        fileDTO.setSuccess(1);\r\n        fileDTO.setUrl(\"/images/wechat.jpg\");\r\n        return fileDTO;\r\n    }\r\n}\r\n\r\n```', '1576212955813', '1576212955813', '15', '0', '1', '0', 'javascript');
INSERT INTO `question` VALUES ('91', '123', '![](http://community-1300911074.cos.ap-beijing.myqcloud.com/1576222051347.jpg?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDMdTEcxZrcGF6nMweOs8D53xe6TcVn11p%26q-sign-time%3D1576222048%3B1891582048%26q-key-time%3D1576222048%3B1891582048%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3Dfc809fe1e5f2231cc09c0f2e072712ce8b8387ef)\r\n\'\'\'\r\npackage com.fastcase.community.provider;\r\n\r\nimport com.fastcase.community.exception.CustomizeErrorCode;\r\nimport com.fastcase.community.exception.CustomizeException;\r\nimport com.qcloud.cos.COSClient;\r\nimport com.qcloud.cos.ClientConfig;\r\nimport com.qcloud.cos.auth.BasicCOSCredentials;\r\nimport com.qcloud.cos.auth.COSCredentials;\r\nimport com.qcloud.cos.model.ObjectMetadata;\r\nimport com.qcloud.cos.model.PutObjectRequest;\r\nimport com.qcloud.cos.model.PutObjectResult;\r\nimport com.qcloud.cos.region.Region;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.web.multipart.MultipartFile;\r\nimport javax.xml.crypto.Data;\r\nimport java.io.*;\r\nimport java.net.URL;\r\nimport java.util.Date;\r\nimport java.util.Random;\r\n\r\npublic class FileUploadUtil {\r\n\r\n    public static COSCredentials cred = new BasicCOSCredentials(\"AKIDMdTEcxZrcGF6nMweOs8D53xe6TcVn11p\", \"kaDhz50mLoSvdAby7B9CGBwX3RcssOxJ\");\r\n    public static ClientConfig clientConfig = new ClientConfig(new Region(\"ap-beijing\"));\r\n    public static COSClient cosClient = new COSClient(cred, clientConfig);\r\n    public static String bucketName = \"community-1300911074\";\r\n    private COSClient cOSClient;\r\n    //无参构造\r\n    public FileUploadUtil() {\r\n        cOSClient = new COSClient(cred, clientConfig);\r\n    }\r\n    //销毁\r\n    public void destory() {\r\n        cOSClient.shutdown();\r\n    }\r\n    //上传图片\r\n    public void uploadImg2Cos(String url) throws Exception {\r\n        File fileOnServer = new File(url);\r\n        FileInputStream fin;\r\n        try {\r\n            fin = new FileInputStream(fileOnServer);\r\n            String[] split = url.split(\"/\");\r\n            this.uploadFile2Cos(fin, split[split.length - 1]);\r\n        } catch (FileNotFoundException e) {\r\n            throw new Exception(\"图片上传失败\");\r\n        }\r\n    }\r\n    //上传图片\r\n    public String uploadFile2Cos(MultipartFile file) throws Exception {\r\n        if (file.getSize() > 10 * 1024 * 1024) {\r\n            throw new CustomizeException(CustomizeErrorCode.UPLOAD_IMAGE_TOO_BIG);\r\n        }\r\n        String originalFilename = file.getOriginalFilename();\r\n        String substring = originalFilename.substring(originalFilename.lastIndexOf(\".\")).toLowerCase();\r\n        Random random = new Random();\r\n        String name = random.nextInt(10000) + System.currentTimeMillis() + substring;\r\n        try {\r\n            InputStream inputStream = file.getInputStream();\r\n            this.uploadFile2Cos(inputStream, name);\r\n            return name;\r\n        } catch (Exception e) {\r\n            throw new CustomizeException(CustomizeErrorCode.IMAGE_UPLOAD_FAILED);\r\n        }\r\n    }\r\n    //获得图片路径\r\n    public String getImgUrl(String fileUrl) {\r\n        return getUrl(fileUrl);\r\n    }\r\n    public String getUrl(String key) {\r\n        // 设置URL过期时间为10年 3600l* 1000*24*365*10\r\n        Date expiration = new Date(System.currentTimeMillis() + 3600L * 1000 * 24 * 365 * 10);\r\n        // 生成URL\r\n        URL url = cosClient.generatePresignedUrl(bucketName, key, expiration);\r\n        if (url != null) {\r\n            return url.toString();\r\n        }\r\n        return null;\r\n    }\r\n    //上传到COS服务器 如果同名文件会覆盖服务器上的\r\n    public String uploadFile2Cos(InputStream inputStream, String fileName) {\r\n        String ret = \"\";\r\n        try {\r\n            // 创建上传Object的Metadata\r\n            ObjectMetadata objectMetadata = new ObjectMetadata();\r\n            objectMetadata.setContentLength(inputStream.available());\r\n            objectMetadata.setCacheControl(\"no-cache\");\r\n            objectMetadata.setHeader(\"Pragma\", \"no-cache\");\r\n            objectMetadata.setContentType(getcontentType(fileName.substring(fileName.lastIndexOf(\".\"))));\r\n            objectMetadata.setContentDisposition(\"inline;filename=\" + fileName);\r\n            // 上传文件\r\n            PutObjectResult putResult = cOSClient.putObject(bucketName,  fileName, inputStream, objectMetadata);\r\n            ret = putResult.getETag();\r\n        } catch (IOException e) {\r\n            //e.printStackTrace();\r\n            throw new CustomizeException(CustomizeErrorCode.IMAGE_UPLOAD_FAILED);\r\n        } finally {\r\n            try {\r\n                if (inputStream != null) {\r\n                    inputStream.close();\r\n                }\r\n            } catch (IOException e) {\r\n                //e.printStackTrace();\r\n                throw new CustomizeException(CustomizeErrorCode.IMAGE_UPLOAD_FAILED);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    // 判断Cos服务文件上传时文件的contentType\r\n    public static String getcontentType(String filenameExtension) {\r\n        if (filenameExtension.equalsIgnoreCase(\"bmp\")) {\r\n            return \"image/bmp\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"gif\")) {\r\n            return \"image/gif\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"jpeg\") || filenameExtension.equalsIgnoreCase(\"jpg\")\r\n                || filenameExtension.equalsIgnoreCase(\"png\")) {\r\n            return \"image/jpeg\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"html\")) {\r\n            return \"text/html\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"txt\")) {\r\n            return \"text/plain\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"vsd\")) {\r\n            return \"application/vnd.visio\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"pptx\") || filenameExtension.equalsIgnoreCase(\"ppt\")) {\r\n            return \"application/vnd.ms-powerpoint\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"docx\") || filenameExtension.equalsIgnoreCase(\"doc\")) {\r\n            return \"application/msword\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"xml\")) {\r\n            return \"text/xml\";\r\n        }\r\n        return \"image/jpeg\";\r\n    }\r\n}\r\n\'\'\'', '1576222121361', '1576222121361', '15', '0', '1', '0', 'java');
INSERT INTO `question` VALUES ('92', '测试一下上传图片', '![](http://community-1300911074.cos.ap-beijing.myqcloud.com/1576222713251.jpg?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDMdTEcxZrcGF6nMweOs8D53xe6TcVn11p%26q-sign-time%3D1576222710%3B1891582710%26q-key-time%3D1576222710%3B1891582710%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3D8f9a981546feefa79f411da478eb0d2787ddb060)\r\n```\r\npackage com.fastcase.community.provider;\r\n\r\nimport com.fastcase.community.exception.CustomizeErrorCode;\r\nimport com.fastcase.community.exception.CustomizeException;\r\nimport com.qcloud.cos.COSClient;\r\nimport com.qcloud.cos.ClientConfig;\r\nimport com.qcloud.cos.auth.BasicCOSCredentials;\r\nimport com.qcloud.cos.auth.COSCredentials;\r\nimport com.qcloud.cos.model.ObjectMetadata;\r\nimport com.qcloud.cos.model.PutObjectRequest;\r\nimport com.qcloud.cos.model.PutObjectResult;\r\nimport com.qcloud.cos.region.Region;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.web.multipart.MultipartFile;\r\nimport javax.xml.crypto.Data;\r\nimport java.io.*;\r\nimport java.net.URL;\r\nimport java.util.Date;\r\nimport java.util.Random;\r\n\r\npublic class FileUploadUtil {\r\n\r\n    public static COSCredentials cred = new BasicCOSCredentials(\"AKIDMdTEcxZrcGF6nMweOs8D53xe6TcVn11p\", \"kaDhz50mLoSvdAby7B9CGBwX3RcssOxJ\");\r\n    public static ClientConfig clientConfig = new ClientConfig(new Region(\"ap-beijing\"));\r\n    public static COSClient cosClient = new COSClient(cred, clientConfig);\r\n    public static String bucketName = \"community-1300911074\";\r\n    private COSClient cOSClient;\r\n    //无参构造\r\n    public FileUploadUtil() {\r\n        cOSClient = new COSClient(cred, clientConfig);\r\n    }\r\n    //销毁\r\n    public void destory() {\r\n        cOSClient.shutdown();\r\n    }\r\n    //上传图片\r\n    public void uploadImg2Cos(String url) throws Exception {\r\n        File fileOnServer = new File(url);\r\n        FileInputStream fin;\r\n        try {\r\n            fin = new FileInputStream(fileOnServer);\r\n            String[] split = url.split(\"/\");\r\n            this.uploadFile2Cos(fin, split[split.length - 1]);\r\n        } catch (FileNotFoundException e) {\r\n            throw new Exception(\"图片上传失败\");\r\n        }\r\n    }\r\n    //上传图片\r\n    public String uploadFile2Cos(MultipartFile file) throws Exception {\r\n        if (file.getSize() > 10 * 1024 * 1024) {\r\n            throw new CustomizeException(CustomizeErrorCode.UPLOAD_IMAGE_TOO_BIG);\r\n        }\r\n        String originalFilename = file.getOriginalFilename();\r\n        String substring = originalFilename.substring(originalFilename.lastIndexOf(\".\")).toLowerCase();\r\n        Random random = new Random();\r\n        String name = random.nextInt(10000) + System.currentTimeMillis() + substring;\r\n        try {\r\n            InputStream inputStream = file.getInputStream();\r\n            this.uploadFile2Cos(inputStream, name);\r\n            return name;\r\n        } catch (Exception e) {\r\n            throw new CustomizeException(CustomizeErrorCode.IMAGE_UPLOAD_FAILED);\r\n        }\r\n    }\r\n    //获得图片路径\r\n    public String getImgUrl(String fileUrl) {\r\n        return getUrl(fileUrl);\r\n    }\r\n    public String getUrl(String key) {\r\n        // 设置URL过期时间为10年 3600l* 1000*24*365*10\r\n        Date expiration = new Date(System.currentTimeMillis() + 3600L * 1000 * 24 * 365 * 10);\r\n        // 生成URL\r\n        URL url = cosClient.generatePresignedUrl(bucketName, key, expiration);\r\n        if (url != null) {\r\n            return url.toString();\r\n        }\r\n        return null;\r\n    }\r\n    //上传到COS服务器 如果同名文件会覆盖服务器上的\r\n    public String uploadFile2Cos(InputStream inputStream, String fileName) {\r\n        String ret = \"\";\r\n        try {\r\n            // 创建上传Object的Metadata\r\n            ObjectMetadata objectMetadata = new ObjectMetadata();\r\n            objectMetadata.setContentLength(inputStream.available());\r\n            objectMetadata.setCacheControl(\"no-cache\");\r\n            objectMetadata.setHeader(\"Pragma\", \"no-cache\");\r\n            objectMetadata.setContentType(getcontentType(fileName.substring(fileName.lastIndexOf(\".\"))));\r\n            objectMetadata.setContentDisposition(\"inline;filename=\" + fileName);\r\n            // 上传文件\r\n            PutObjectResult putResult = cOSClient.putObject(bucketName,  fileName, inputStream, objectMetadata);\r\n            ret = putResult.getETag();\r\n        } catch (IOException e) {\r\n            //e.printStackTrace();\r\n            throw new CustomizeException(CustomizeErrorCode.IMAGE_UPLOAD_FAILED);\r\n        } finally {\r\n            try {\r\n                if (inputStream != null) {\r\n                    inputStream.close();\r\n                }\r\n            } catch (IOException e) {\r\n                //e.printStackTrace();\r\n                throw new CustomizeException(CustomizeErrorCode.IMAGE_UPLOAD_FAILED);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    // 判断Cos服务文件上传时文件的contentType\r\n    public static String getcontentType(String filenameExtension) {\r\n        if (filenameExtension.equalsIgnoreCase(\"bmp\")) {\r\n            return \"image/bmp\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"gif\")) {\r\n            return \"image/gif\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"jpeg\") || filenameExtension.equalsIgnoreCase(\"jpg\")\r\n                || filenameExtension.equalsIgnoreCase(\"png\")) {\r\n            return \"image/jpeg\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"html\")) {\r\n            return \"text/html\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"txt\")) {\r\n            return \"text/plain\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"vsd\")) {\r\n            return \"application/vnd.visio\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"pptx\") || filenameExtension.equalsIgnoreCase(\"ppt\")) {\r\n            return \"application/vnd.ms-powerpoint\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"docx\") || filenameExtension.equalsIgnoreCase(\"doc\")) {\r\n            return \"application/msword\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"xml\")) {\r\n            return \"text/xml\";\r\n        }\r\n        return \"image/jpeg\";\r\n    }\r\n}\r\n```', '1576222719491', '1576222719491', '15', '0', '1', '0', 'sql');
INSERT INTO `question` VALUES ('93', 'sssss', '![](http://community-1300911074.cos.ap-beijing.myqcloud.com/1576224339414.jpg?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDMdTEcxZrcGF6nMweOs8D53xe6TcVn11p%26q-sign-time%3D1576224334%3B1891584334%26q-key-time%3D1576224334%3B1891584334%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3Dbb966aa411d8e953f8a2fc0b371b48394545ba41)\r\n\r\n```\r\npackage com.fastcase.community.provider;\r\n\r\nimport com.fastcase.community.exception.CustomizeErrorCode;\r\nimport com.fastcase.community.exception.CustomizeException;\r\nimport com.qcloud.cos.COSClient;\r\nimport com.qcloud.cos.ClientConfig;\r\nimport com.qcloud.cos.auth.BasicCOSCredentials;\r\nimport com.qcloud.cos.auth.COSCredentials;\r\nimport com.qcloud.cos.model.ObjectMetadata;\r\nimport com.qcloud.cos.model.PutObjectRequest;\r\nimport com.qcloud.cos.model.PutObjectResult;\r\nimport com.qcloud.cos.region.Region;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.web.multipart.MultipartFile;\r\nimport javax.xml.crypto.Data;\r\nimport java.io.*;\r\nimport java.net.URL;\r\nimport java.util.Date;\r\nimport java.util.Random;\r\n\r\npublic class FileUploadUtil {\r\n\r\n    public static COSCredentials cred = new BasicCOSCredentials(\"AKIDMdTEcxZrcGF6nMweOs8D53xe6TcVn11p\", \"kaDhz50mLoSvdAby7B9CGBwX3RcssOxJ\");\r\n    public static ClientConfig clientConfig = new ClientConfig(new Region(\"ap-beijing\"));\r\n    public static COSClient cosClient = new COSClient(cred, clientConfig);\r\n    public static String bucketName = \"community-1300911074\";\r\n    private COSClient cOSClient;\r\n    //无参构造\r\n    public FileUploadUtil() {\r\n        cOSClient = new COSClient(cred, clientConfig);\r\n    }\r\n    //销毁\r\n    public void destory() {\r\n        cOSClient.shutdown();\r\n    }\r\n    //上传图片\r\n    public void uploadImg2Cos(String url) throws Exception {\r\n        File fileOnServer = new File(url);\r\n        FileInputStream fin;\r\n        try {\r\n            fin = new FileInputStream(fileOnServer);\r\n            String[] split = url.split(\"/\");\r\n            this.uploadFile2Cos(fin, split[split.length - 1]);\r\n        } catch (FileNotFoundException e) {\r\n            throw new CustomizeException(CustomizeErrorCode.IMAGE_UPLOAD_FAILED);\r\n        }\r\n    }\r\n    //上传图片\r\n    public String uploadFile2Cos(MultipartFile file) throws Exception {\r\n        if (file.getSize() > 10 * 1024 * 1024) {\r\n            throw new CustomizeException(CustomizeErrorCode.UPLOAD_IMAGE_TOO_BIG);\r\n        }\r\n        String originalFilename = file.getOriginalFilename();\r\n        String substring = originalFilename.substring(originalFilename.lastIndexOf(\".\")).toLowerCase();\r\n        Random random = new Random();\r\n        String name = random.nextInt(10000) + System.currentTimeMillis() + substring;\r\n        try {\r\n            InputStream inputStream = file.getInputStream();\r\n            this.uploadFile2Cos(inputStream, name);\r\n            return name;\r\n        } catch (Exception e) {\r\n            throw new CustomizeException(CustomizeErrorCode.IMAGE_UPLOAD_FAILED);\r\n        }\r\n    }\r\n    //获得图片路径\r\n    public String getImgUrl(String fileUrl) {\r\n        return getUrl(fileUrl);\r\n    }\r\n    public String getUrl(String key) {\r\n        // 设置URL过期时间为10年 3600l* 1000*24*365*10\r\n        Date expiration = new Date(System.currentTimeMillis() + 3600L * 1000 * 24 * 365 * 10);\r\n        // 生成URL\r\n        URL url = cosClient.generatePresignedUrl(bucketName, key, expiration);\r\n        if (url != null) {\r\n            return url.toString();\r\n        }\r\n        return null;\r\n    }\r\n    //上传到COS服务器 如果同名文件会覆盖服务器上的\r\n    public String uploadFile2Cos(InputStream inputStream, String fileName) {\r\n        String ret = \"\";\r\n        try {\r\n            // 创建上传Object的Metadata\r\n            ObjectMetadata objectMetadata = new ObjectMetadata();\r\n            objectMetadata.setContentLength(inputStream.available());\r\n            objectMetadata.setCacheControl(\"no-cache\");\r\n            objectMetadata.setHeader(\"Pragma\", \"no-cache\");\r\n            objectMetadata.setContentType(getcontentType(fileName.substring(fileName.lastIndexOf(\".\"))));\r\n            objectMetadata.setContentDisposition(\"inline;filename=\" + fileName);\r\n            // 上传文件\r\n            PutObjectResult putResult = cOSClient.putObject(bucketName,  fileName, inputStream, objectMetadata);\r\n            ret = putResult.getETag();\r\n        } catch (IOException e) {\r\n            //e.printStackTrace();\r\n            throw new CustomizeException(CustomizeErrorCode.IMAGE_UPLOAD_FAILED);\r\n        } finally {\r\n            try {\r\n                if (inputStream != null) {\r\n                    inputStream.close();\r\n                }\r\n            } catch (IOException e) {\r\n                //e.printStackTrace();\r\n                throw new CustomizeException(CustomizeErrorCode.IMAGE_UPLOAD_FAILED);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    // 判断Cos服务文件上传时文件的contentType\r\n    public static String getcontentType(String filenameExtension) {\r\n        if (filenameExtension.equalsIgnoreCase(\"bmp\")) {\r\n            return \"image/bmp\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"gif\")) {\r\n            return \"image/gif\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"jpeg\") || filenameExtension.equalsIgnoreCase(\"jpg\")\r\n                || filenameExtension.equalsIgnoreCase(\"png\")) {\r\n            return \"image/jpeg\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"html\")) {\r\n            return \"text/html\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"txt\")) {\r\n            return \"text/plain\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"vsd\")) {\r\n            return \"application/vnd.visio\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"pptx\") || filenameExtension.equalsIgnoreCase(\"ppt\")) {\r\n            return \"application/vnd.ms-powerpoint\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"docx\") || filenameExtension.equalsIgnoreCase(\"doc\")) {\r\n            return \"application/msword\";\r\n        }\r\n        if (filenameExtension.equalsIgnoreCase(\"xml\")) {\r\n            return \"text/xml\";\r\n        }\r\n        return \"image/jpeg\";\r\n    }\r\n}\r\n```', '1576224348526', '1576224348526', '15', '0', '1', '0', 'python');
INSERT INTO `question` VALUES ('94', 'btf', '![](http://community-1300911074.cos.ap-beijing.myqcloud.com/1576224446802.jpg?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDMdTEcxZrcGF6nMweOs8D53xe6TcVn11p%26q-sign-time%3D1576224444%3B1891584444%26q-key-time%3D1576224444%3B1891584444%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3D8137722cc8b924ebae3f27c076b23e0d299a97bd)', '1576224450325', '1576224450325', '15', '2', '13', '0', 'java');
INSERT INTO `question` VALUES ('95', '美女', '![](http://community-1300911074.cos.ap-beijing.myqcloud.com/1576227245070.jpg?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDMdTEcxZrcGF6nMweOs8D53xe6TcVn11p%26q-sign-time%3D1576227244%3B1891587244%26q-key-time%3D1576227244%3B1891587244%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3D00562ee4de3f57ecf885263e5f8dcf9836d33b07)\r\n![](http://community-1300911074.cos.ap-beijing.myqcloud.com/1576227254965.jpg?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDMdTEcxZrcGF6nMweOs8D53xe6TcVn11p%26q-sign-time%3D1576227252%3B1891587252%26q-key-time%3D1576227252%3B1891587252%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3D9f6e3714628604da6ca3b6f92d571d58c0083a1b)\r\n![](http://community-1300911074.cos.ap-beijing.myqcloud.com/1576227273319.jpg?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDMdTEcxZrcGF6nMweOs8D53xe6TcVn11p%26q-sign-time%3D1576227264%3B1891587264%26q-key-time%3D1576227264%3B1891587264%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3Dd88ec7423f20f8be96a5cdb5f12bc33ff7024280)', '1576227271340', '1576227271340', '15', '0', '3', null, 'vim');
INSERT INTO `question` VALUES ('96', '1', '1', '1576230305264', '1576230305264', '15', '0', '0', '0', 'html5');
INSERT INTO `question` VALUES ('97', '1', '1', '1576230312006', '1576230312006', '15', '0', '0', '0', 'python');
INSERT INTO `question` VALUES ('98', '1', '1', '1576230574739', '1576230574739', '15', '0', '0', '0', 'java');
INSERT INTO `question` VALUES ('99', '1', '1', '1576230580961', '1576230580961', '15', '0', '0', '0', 'python');
INSERT INTO `question` VALUES ('100', '1', '1', '1576230587330', '1576230587330', '15', '0', '0', '0', 'python');
INSERT INTO `question` VALUES ('101', '1', '1', '1576230594273', '1576230594273', '15', '0', '0', '0', 'objective-c');
INSERT INTO `question` VALUES ('102', '1', '1', '1576230601439', '1576230601439', '15', '0', '0', '0', 'typescript');
INSERT INTO `question` VALUES ('103', '1', '1', '1576230606465', '1576230606465', '15', '0', '0', '0', 'typescript');
INSERT INTO `question` VALUES ('104', '1', '1', '1576230612656', '1576230612656', '15', '0', '0', '0', 'rust');
INSERT INTO `question` VALUES ('105', '1', '1', '1576230619749', '1576230619749', '15', '0', '0', '0', 'rust');
INSERT INTO `question` VALUES ('106', '1', '1111', '1576230635419', '1576230635419', '15', '0', '0', '0', 'typescript');
INSERT INTO `question` VALUES ('107', '1', '1', '1576230640684', '1576230640684', '15', '0', '0', '0', 'python');
INSERT INTO `question` VALUES ('108', '1', '11', '1576230646967', '1576230646967', '15', '0', '0', '0', 'objective-c');
INSERT INTO `question` VALUES ('109', '1', '1111', '1576232453638', '1576232453638', '15', '0', '0', '0', 'html5');

-- ----------------------------
-- Table structure for `user`
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `id` bigint(20) NOT NULL,
  `account_id` varchar(100) DEFAULT NULL,
  `name` varchar(50) DEFAULT NULL,
  `token` char(36) DEFAULT NULL,
  `gmt_create` bigint(20) DEFAULT NULL,
  `gmt_modified` bigint(20) DEFAULT NULL,
  `bio` varchar(256) DEFAULT NULL,
  `avatar_url` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES ('15', '58578652', 'shikong', 'efd416c4-a1bd-4b2b-8981-9dbf58a727a5', '1576032746841', '1576283193925', null, 'https://avatars0.githubusercontent.com/u/58578652?v=4');
